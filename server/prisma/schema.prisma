generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String?  @db.VarChar(191)
  email      String   @unique
  provider   String
  oauth_id   String
  image      String?
  created_at DateTime @default(now())

chatGroups ChatGroup[]

  @@unique([provider, oauth_id])
  @@map("users")
}

model ChatGroup {
  id         String     @id @default(uuid()) @db.Uuid
  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  title      String     @db.VarChar(191)
  passcode   String     @db.VarChar(20)
  profile_image String?    @db.VarChar(255)
  isDelete   Boolean    @default(false)
  created_at DateTime   @default(now())
  
  GroupUsers GroupUsers[]
  Chats   Chats[]
}

model Chats {
  id         String    @id
  group      ChatGroup @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_id   String    @db.Uuid
  message    String?
  media_url  String?   // Stores image or video URL
  media_type String?
  profile_image String?    @db.VarChar(255)
  counter_reply Json?
  name       String
  created_at DateTime  @default(now())

  @@index([created_at])
  @@map("chats")
}




model GroupUsers {
  id         Int       @id @default(autoincrement())
  group      ChatGroup @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_id   String    @db.Uuid
  name       String
  profile_image String?    @db.VarChar(255)
  created_at DateTime  @default(now())

  @@map("group_users")
}